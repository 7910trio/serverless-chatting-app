name: Deploy Fullstack ChatApp

on:
  push:
    branches:
      - master 

# GitHub가 워크플로우 실행 시 OIDC 토큰을 생성하여 AWS IAM 역할을 맡을 수 있도록 허용
permissions:
  id-token: write
  contents: read  

jobs:
  # 1. 백엔드 (Lambda 코드 패키징 & Terraform으로 배포)
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra # 기본 작업 위치는 infra 폴더
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # --- Lambda 코드 빌드 & zip ---
      - name: Package REST Lambda
        run: |
          cd ../backend/rest
          mkdir -p ../../infra/dist
          zip -r ../../infra/dist/rest.zip .
      
      - name: Package WebSocket Lambda
        run: |
          cd ../backend/websocket
          mkdir -p ../../infra/dist
          zip -r ../../infra/dist/websocket.zip .

      # --- Terraform 배포 ---
      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform apply -auto-approve

      # --- Terraform Output 저장 ---
      - name: Get Terraform Outputs
        run: |
          echo "WS_URL=$(terraform output -raw ws_url)" >> $GITHUB_ENV
          echo "REST_URL=$(terraform output -raw rest_url)" >> $GITHUB_ENV
          echo "BUCKET_NAME=$(terraform output -raw bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$(terraform output -raw cloudfront_id)" >> $GITHUB_ENV

      - name: Save Outputs as Artifact # $GITHUB_ENV에 저장된 환경 변수를 꺼내서 텍스트 파일로 기록
        run: | 
          echo "$WS_URL" > "$GITHUB_WORKSPACE/ws_url.txt"
          echo "$REST_URL" > "$GITHUB_WORKSPACE/rest_url.txt"
          echo "$BUCKET_NAME" > "$GITHUB_WORKSPACE/bucket.txt"
          echo "$CLOUDFRONT_ID" > "$GITHUB_WORKSPACE/cloudfront.txt"
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: api-urls # api-urls라는 이름의 아티팩트에 변수 파일들 묶어서 업로드 -> 다른 job에서도 다운로드해서 사용할 수 있음
          path: |
            ws_url.txt
            rest_url.txt
            bucket.txt
            cloudfront.txt

  # 2. 프론트엔드 (React 빌드 & S3 + CloudFront 배포)
  frontend:
    runs-on: ubuntu-latest
    needs: backend
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}

      # --- Terraform Outputs 다운로드 ---
      - name: Download API URLs Artifact
        uses: actions/download-artifact@v4
        with:
          name: api-urls
          path: .

      # Artifact 파일들 잘 다운로드 되었는지 확인
      - name: Debug artifact files
        run: ls -R $GITHUB_WORKSPACE

      # --- Node.js 세팅 (React 빌드용) ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # --- .env 파일 생성 ---
      - name: Create .env File
        run: |
          REST_URL="$(cat ./rest_url.txt)"
          WS_URL="$(cat ./ws_url.txt)"

          # printf %s 로 값 그대로 쓰기 (셸이 $default를 확장하지 못하게 함)
          printf 'VITE_REST_URL=%s\n' "$REST_URL" > .env
          printf 'VITE_WS_URL=%s\n' "$WS_URL" >> .env
          printf 'VITE_DEFAULT_ROOM_ID=general\n' >> .env
          printf 'VITE_HISTORY_LIMIT=50\n' >> .env

          echo "---- .env preview ----"
          cat .env
      # --- React 빌드 ---
      - name: Install dependencies
        run: npm ci

      - name: Build React App
        run: npm run build

      # --- S3 업로드 & CloudFront 캐시 무효화 ---
      - name: Upload to S3
        run: aws s3 sync dist/ s3://$(cat $GITHUB_WORKSPACE/bucket.txt) --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $(cat $GITHUB_WORKSPACE/cloudfront.txt) \
            --paths "/*"
